components:
  schemas:
    AddTeamMembersRequest:
      properties:
        memberIds:
          items:
            type: string
          minItems: 1
          type: array
      required:
      - memberIds
      type: object
    ApiToken:
      properties:
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        createdById:
          type: string
        deletedAt:
          format: date-time
          type: string
        description:
          type: string
        endAt:
          format: date-time
          type: string
        expiryPeriodInDays:
          type: integer
        id:
          type: string
        lastUsedAt:
          format: date-time
          type: string
        name:
          type: string
        roles:
          items:
            $ref: '#/components/schemas/ApiTokenRole'
          type: array
        shortToken:
          type: string
        startAt:
          format: date-time
          type: string
        token:
          type: string
        type:
          enum:
          - WORKSPACE
          - ORGANIZATION
          - DEPLOYMENT
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        updatedById:
          type: string
      required:
      - createdAt
      - createdById
      - description
      - id
      - name
      - roles
      - shortToken
      - startAt
      - type
      - updatedAt
      - updatedById
      type: object
    ApiTokenRole:
      properties:
        entityId:
          type: string
        entityType:
          enum:
          - WORKSPACE
          - ORGANIZATION
          - DEPLOYMENT
          type: string
        role:
          type: string
      required:
      - entityId
      - entityType
      - role
      type: object
    ApiTokenWorkspaceRoleRequest:
      properties:
        entityId:
          type: string
        role:
          type: string
      required:
      - entityId
      - role
      type: object
    BasicSubjectProfile:
      properties:
        apiTokenName:
          type: string
        avatarUrl:
          type: string
        fullName:
          type: string
        id:
          type: string
        subjectType:
          enum:
          - USER
          - SERVICEKEY
          type: string
        username:
          type: string
      required:
      - id
      type: object
    Cluster:
      properties:
        appliedTemplateVersion:
          type: string
        cloudProvider:
          enum:
          - aws
          - gcp
          - azure
          type: string
        createdAt:
          format: date-time
          type: string
        dbInstanceType:
          type: string
        deletedAt:
          type: string
        id:
          type: string
        isCordoned:
          type: boolean
        isDryRun:
          type: boolean
        isLimited:
          type: boolean
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        metadata:
          $ref: '#/components/schemas/ClusterMetadata'
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/NodePool'
          type: array
        organizationId:
          type: string
        podSubnetRange:
          type: string
        providerAccount:
          type: string
        region:
          type: string
        servicePeeringRange:
          type: string
        serviceSubnetRange:
          type: string
        status:
          enum:
          - CREATING
          - CREATED
          - CREATE_FAILED
          - UPDATING
          - DELETING
          - DELETED
          - DELETE_FAILED
          - FORCE_DELETED
          type: string
        templateUrl:
          type: string
        templateVersion:
          type: string
        temporalRunId:
          type: string
        tenantId:
          type: string
        type:
          enum:
          - HOSTED
          - BRING_YOUR_OWN_CLOUD
          - VIRTUAL_RUNTIMES
          - SHARED
          type: string
        updatedAt:
          format: date-time
          type: string
        vpcSubnetRange:
          type: string
        workspaces:
          items:
            type: string
          type: array
      required:
      - appliedTemplateVersion
      - cloudProvider
      - createdAt
      - dbInstanceType
      - id
      - isDryRun
      - isLimited
      - k8sTags
      - metadata
      - name
      - nodePools
      - organizationId
      - podSubnetRange
      - providerAccount
      - region
      - servicePeeringRange
      - serviceSubnetRange
      - status
      - templateUrl
      - templateVersion
      - temporalRunId
      - tenantId
      - type
      - updatedAt
      - vpcSubnetRange
      - workspaces
      type: object
    ClusterDetailed:
      properties:
        appliedTemplateVersion:
          type: string
        cloudProvider:
          enum:
          - aws
          - gcp
          - azure
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        dbInstanceType:
          type: string
        deletedAt:
          type: string
        id:
          type: string
        isCordoned:
          type: boolean
        isDryRun:
          type: boolean
        isLimited:
          type: boolean
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        metadata:
          $ref: '#/components/schemas/ClusterMetadata'
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/NodePool'
          type: array
        orgShortName:
          description: 'Deprecated: orgShortName has been replaced with organizationShortName'
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        organizationShortName:
          type: string
        organizationSupportPlan:
          type: string
        organizationTrialExpiresAt:
          type: string
        podSubnetRange:
          type: string
        providerAccount:
          type: string
        region:
          type: string
        servicePeeringRange:
          type: string
        serviceSubnetRange:
          type: string
        status:
          enum:
          - CREATING
          - CREATED
          - CREATE_FAILED
          - UPDATING
          - DELETING
          - DELETED
          - DELETE_FAILED
          - FORCE_DELETED
          type: string
        templateUrl:
          type: string
        templateVersion:
          type: string
        temporalRunId:
          type: string
        tenantId:
          type: string
        type:
          enum:
          - HOSTED
          - BRING_YOUR_OWN_CLOUD
          - VIRTUAL_RUNTIMES
          - SHARED
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        vpcSubnetRange:
          type: string
        workspaces:
          items:
            type: string
          type: array
      required:
      - appliedTemplateVersion
      - cloudProvider
      - createdAt
      - createdBy
      - dbInstanceType
      - id
      - isDryRun
      - isLimited
      - k8sTags
      - metadata
      - name
      - nodePools
      - organizationId
      - organizationName
      - organizationShortName
      - organizationSupportPlan
      - podSubnetRange
      - providerAccount
      - region
      - servicePeeringRange
      - serviceSubnetRange
      - status
      - templateUrl
      - templateVersion
      - temporalRunId
      - tenantId
      - type
      - updatedAt
      - updatedBy
      - vpcSubnetRange
      - workspaces
      type: object
    ClusterMetadata:
      properties:
        externalIPs:
          items:
            type: string
          type: array
      type: object
    ClusterOptions:
      properties:
        databaseInstances:
          items:
            $ref: '#/components/schemas/ProviderInstanceType'
          type: array
        defaultDatabaseInstance:
          $ref: '#/components/schemas/ProviderInstanceType'
        defaultNodeInstance:
          $ref: '#/components/schemas/ProviderInstanceType'
        defaultPodSubnetRange:
          type: string
        defaultRegion:
          $ref: '#/components/schemas/ProviderRegion'
        defaultServicePeeringRange:
          type: string
        defaultServiceSubnetRange:
          type: string
        defaultVpcSubnetRange:
          type: string
        nodeCountDefault:
          type: integer
        nodeCountMax:
          type: integer
        nodeCountMin:
          type: integer
        nodeInstances:
          items:
            $ref: '#/components/schemas/ProviderInstanceType'
          type: array
        provider:
          type: string
        regions:
          items:
            $ref: '#/components/schemas/ProviderRegion'
          type: array
        templateVersions:
          items:
            $ref: '#/components/schemas/TemplateVersion'
          type: array
      required:
      - databaseInstances
      - defaultDatabaseInstance
      - defaultNodeInstance
      - defaultRegion
      - defaultVpcSubnetRange
      - nodeCountDefault
      - nodeCountMax
      - nodeCountMin
      - nodeInstances
      - provider
      - regions
      - templateVersions
      type: object
    ClusterTag:
      properties:
        key:
          type: string
        value:
          type: string
      type: object
    ClustersPaginated:
      properties:
        clusters:
          items:
            $ref: '#/components/schemas/Cluster'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - clusters
      - limit
      - offset
      - totalCount
      type: object
    Connection:
      properties:
        connectionName:
          type: string
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: '#/components/schemas/BasicSubjectProfile'
        extra:
          additionalProperties:
            type: string
          type: object
        host:
          type: string
        id:
          type: string
        login:
          type: string
        password:
          type: string
        port:
          type: integer
        schema:
          type: string
        type:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedByUser:
          $ref: '#/components/schemas/BasicSubjectProfile'
      required:
      - connectionName
      - createdAt
      - createdByUser
      - id
      - type
      - updatedAt
      - updatedByUser
      type: object
    ConnectionsPaginated:
      properties:
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - connections
      - limit
      - offset
      - totalCount
      type: object
    CreateAwsClusterRequest:
      properties:
        dbInstanceType:
          type: string
        isDryRun:
          type: boolean
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/CreateNodePoolRequest'
          type: array
        providerAccount:
          type: string
        region:
          type: string
        templateVersion:
          type: string
        type:
          enum:
          - HOSTED
          - BRING_YOUR_OWN_CLOUD
          - VIRTUAL_RUNTIMES
          - SHARED
          type: string
        vpcSubnetRange:
          type: string
      required:
      - dbInstanceType
      - name
      - region
      - templateVersion
      - type
      - vpcSubnetRange
      type: object
    CreateAzureClusterRequest:
      properties:
        dbInstanceType:
          type: string
        isDryRun:
          type: boolean
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/CreateNodePoolRequest'
          type: array
        providerAccount:
          type: string
        region:
          type: string
        templateVersion:
          type: string
        tenantId:
          type: string
        type:
          enum:
          - HOSTED
          - BRING_YOUR_OWN_CLOUD
          - VIRTUAL_RUNTIMES
          - SHARED
          type: string
        vpcSubnetRange:
          type: string
      required:
      - dbInstanceType
      - name
      - region
      - templateVersion
      - type
      - vpcSubnetRange
      type: object
    CreateDeploymentApiTokenRequest:
      properties:
        description:
          type: string
        name:
          type: string
        role:
          type: string
        tokenExpiryPeriodInDays:
          maximum: 3650
          minimum: 1
          type: integer
      required:
      - name
      - role
      type: object
    CreateDeploymentRequest:
      properties:
        astroRuntimeVersion:
          type: string
        cloudProvider:
          description: required for standard deployment creation
          enum:
          - aws
          - azure
          - gcp
          type: string
        clusterId:
          description: required for hybrid and dedicated deployment creation
          type: string
        description:
          maxLength: 1000
          type: string
        executor:
          enum:
          - CeleryExecutor
          - KubernetesExecutor
          type: string
        hostedSpec:
          $ref: '#/components/schemas/HostedDeploymentSpec'
        hybridSpec:
          $ref: '#/components/schemas/HybridDeploymentSpec'
        isCicdEnforced:
          type: boolean
        isDagDeployEnabled:
          type: boolean
        name:
          maxLength: 500
          type: string
        region:
          description: required for standard deployment creation
          type: string
        type:
          enum:
          - Dedicated
          - Hybrid
          - Standard
          type: string
        workspaceId:
          type: string
      required:
      - astroRuntimeVersion
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - name
      - type
      - workspaceId
      type: object
    CreateGcpClusterRequest:
      properties:
        dbInstanceType:
          type: string
        isDryRun:
          type: boolean
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/CreateNodePoolRequest'
          type: array
        podSubnetRange:
          type: string
        providerAccount:
          type: string
        region:
          type: string
        servicePeeringRange:
          type: string
        serviceSubnetRange:
          type: string
        templateVersion:
          type: string
        type:
          enum:
          - HOSTED
          - BRING_YOUR_OWN_CLOUD
          - VIRTUAL_RUNTIMES
          - SHARED
          type: string
        vpcSubnetRange:
          type: string
      required:
      - dbInstanceType
      - name
      - podSubnetRange
      - region
      - servicePeeringRange
      - serviceSubnetRange
      - templateVersion
      - type
      - vpcSubnetRange
      type: object
    CreateNodePoolRequest:
      properties:
        isDefault:
          type: boolean
        maxNodeCount:
          type: integer
        name:
          type: string
        nodeInstanceType:
          type: string
      required:
      - isDefault
      - maxNodeCount
      - name
      - nodeInstanceType
      type: object
    CreateOrganizationApiTokenRequest:
      properties:
        description:
          type: string
        name:
          type: string
        role:
          type: string
        tokenExpiryPeriodInDays:
          maximum: 3650
          minimum: 1
          type: integer
      required:
      - name
      - role
      type: object
    CreateOrganizationRequest:
      properties:
        metadata:
          additionalProperties: true
          type: object
        name:
          maxLength: 50
          minLength: 3
          type: string
      required:
      - name
      type: object
    CreateTeamRequest:
      properties:
        description:
          type: string
        memberIds:
          items:
            type: string
          type: array
        name:
          type: string
        organizationRole:
          type: string
      required:
      - name
      type: object
    CreateUserInviteRequest:
      properties:
        inviteeEmail:
          type: string
        role:
          type: string
      required:
      - inviteeEmail
      - role
      type: object
    CreateWorkspaceApiTokenRequest:
      properties:
        description:
          type: string
        name:
          type: string
        role:
          type: string
        tokenExpiryPeriodInDays:
          maximum: 3650
          minimum: 1
          type: integer
      required:
      - name
      - role
      type: object
    CreateWorkspaceRequest:
      properties:
        apiKeyOnlyDeploymentsDefault:
          type: boolean
        description:
          type: string
        name:
          maxLength: 50
          type: string
      required:
      - name
      type: object
    DagFilters:
      properties:
        deployments:
          additionalProperties:
            type: string
          type: object
        owners:
          items:
            type: string
          type: array
        tags:
          items:
            type: string
          type: array
        warnings:
          items:
            type: string
          type: array
      required:
      - deployments
      - owners
      - tags
      type: object
    DagRunTaskInstance:
      properties:
        dagId:
          type: string
        dagRunId:
          type: string
        duration:
          type: number
        endDate:
          type: string
        executionDate:
          type: string
        executorConfig:
          type: string
        hostname:
          type: string
        maxTries:
          type: integer
        operator:
          type: string
        pid:
          type: integer
        pool:
          type: string
        poolSlots:
          type: integer
        priorityWeight:
          type: integer
        queue:
          type: string
        queuedWhen:
          type: string
        renderedFields:
          additionalProperties: true
          type: object
        startDate:
          type: string
        state:
          type: string
        taskId:
          type: string
        tryNumber:
          type: integer
        unixname:
          type: string
      type: object
    DagSchedule:
      properties:
        CronExpression:
          $ref: '#/components/schemas/internal_ScheduleIntervalCronExpression'
        RelativeDelta:
          $ref: '#/components/schemas/internal_ScheduleIntervalRelativeDelta'
        TimeDelta:
          $ref: '#/components/schemas/internal_ScheduleIntervalTimeDelta'
      type: object
    DagTag:
      properties:
        name:
          type: string
      type: object
    Deploy:
      properties:
        createdAt:
          format: date-time
          type: string
        createdBySubject:
          $ref: '#/components/schemas/BasicSubjectProfile'
        dagTarballVersion:
          type: string
        deploymentId:
          type: string
        description:
          type: string
        id:
          type: string
        imageTag:
          type: string
        imageUrl:
          type: string
        isDagDeployEnabled:
          type: boolean
        runtimeVersion:
          type: string
        status:
          enum:
          - initialized
          - deployed
          type: string
        type:
          enum:
          - image
          - dag
          type: string
      required:
      - createdAt
      - deploymentId
      - id
      - imageTag
      - imageUrl
      - isDagDeployEnabled
      - runtimeVersion
      - status
      - type
      type: object
    Deployment:
      properties:
        alertEmails:
          items:
            type: string
          type: array
        apiKeyOnlyDeployments:
          type: boolean
        clusterId:
          type: string
        createdAt:
          format: date-time
          type: string
        currentDagTarballVersion:
          type: string
        currentImageVersion:
          type: string
        dagDeployEnabled:
          type: boolean
        defaultTaskPodCpu:
          type: string
        defaultTaskPodMemory:
          type: string
        description:
          type: string
        desiredDagTarballVersion:
          type: string
        environmentVariables:
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariable'
          type: array
        executor:
          type: string
        externalIPs:
          items:
            type: string
          type: array
        id:
          type: string
        imageId:
          type: string
        imageRepository:
          type: string
        imageTag:
          type: string
        isHighAvailability:
          type: boolean
        laminarHealthStatus:
          additionalProperties: true
          type: object
        name:
          type: string
        orgShortName:
          description: 'Deprecated: orgShortName has been replaced with organizationShortName'
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        organizationShortName:
          type: string
        releaseName:
          type: string
        resourceQuotaCpu:
          type: string
        resourceQuotaMemory:
          type: string
        runtimeVersion:
          type: string
        schedulerAu:
          type: integer
        schedulerCpu:
          type: string
        schedulerMemory:
          type: string
        schedulerReplicas:
          type: integer
        schedulerSize:
          type: string
        specCreatedAt:
          format: date-time
          type: string
        specUpdatedAt:
          format: date-time
          type: string
        status:
          enum:
          - HEALTHY
          - UNHEALTHY
          - UNKNOWN
          - CREATING
          - DEPLOYING
          type: string
        statusReason:
          type: string
        type:
          enum:
          - Dedicated
          - Hybrid
          - Standard
          type: string
        updatedAt:
          format: date-time
          type: string
        webServerCpu:
          type: string
        webServerIngressHostname:
          type: string
        webServerMemory:
          type: string
        webServerReplicas:
          type: integer
        webServerUrl:
          type: string
        workerCpu:
          type: string
        workerMemory:
          type: string
        workerQueues:
          items:
            $ref: '#/components/schemas/WorkerQueue'
          type: array
        workersAu:
          type: integer
        workersReplicas:
          type: integer
        workloadIdentity:
          type: string
        workspaceId:
          type: string
      required:
      - apiKeyOnlyDeployments
      - clusterId
      - createdAt
      - dagDeployEnabled
      - id
      - imageId
      - imageRepository
      - imageTag
      - isHighAvailability
      - name
      - organizationId
      - organizationName
      - organizationShortName
      - releaseName
      - runtimeVersion
      - schedulerAu
      - schedulerCpu
      - schedulerMemory
      - schedulerReplicas
      - specCreatedAt
      - specUpdatedAt
      - status
      - updatedAt
      - webServerCpu
      - webServerIngressHostname
      - webServerMemory
      - webServerUrl
      - workerCpu
      - workerMemory
      - workersAu
      - workspaceId
      type: object
    DeploymentEnvironmentVariable:
      properties:
        isSecret:
          type: boolean
        key:
          type: string
        updatedAt:
          type: string
        value:
          type: string
      required:
      - isSecret
      - key
      - updatedAt
      - value
      type: object
    DeploymentInstanceSpecRequest:
      properties:
        au:
          minimum: 5
          type: integer
        replicas:
          minimum: 1
          type: integer
      type: object
    DeploymentLog:
      properties:
        limit:
          minimum: 1
          type: integer
        maxNumResults:
          minimum: 0
          type: integer
        offset:
          minimum: 0
          type: integer
        resultCount:
          minimum: 0
          type: integer
        results:
          items:
            $ref: '#/components/schemas/DeploymentLogEntry'
          type: array
        searchId:
          type: string
      required:
      - limit
      - maxNumResults
      - offset
      - resultCount
      - results
      - searchId
      type: object
    DeploymentLogEntry:
      properties:
        raw:
          type: string
        source:
          enum:
          - scheduler
          - webserver
          - triggerer
          - worker
          type: string
        timestamp:
          type: number
      required:
      - raw
      - source
      - timestamp
      type: object
    DeploymentOptions:
      properties:
        executors:
          items:
            type: string
          type: array
        resourceQuotas:
          $ref: '#/components/schemas/ResourceQuotaOptions'
        runtimeReleases:
          items:
            $ref: '#/components/schemas/RuntimeRelease'
          type: array
        schedulerMachines:
          items:
            $ref: '#/components/schemas/SchedulerMachine'
          type: array
        workerMachines:
          items:
            $ref: '#/components/schemas/WorkerMachine'
          type: array
        workerQueues:
          $ref: '#/components/schemas/WorkerQueueOptions'
        workloadIdentityOptions:
          items:
            $ref: '#/components/schemas/WorkloadIdentityOption'
          type: array
      required:
      - executors
      - resourceQuotas
      - runtimeReleases
      - schedulerMachines
      - workerMachines
      - workerQueues
      type: object
    DeploymentsPaginated:
      properties:
        deployments:
          items:
            $ref: '#/components/schemas/Deployment'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - deployments
      - limit
      - offset
      - totalCount
      type: object
    DeploysPaginated:
      properties:
        deploys:
          items:
            $ref: '#/components/schemas/Deploy'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - deploys
      - limit
      - offset
      - totalCount
      type: object
    Entitlement:
      properties:
        enabled:
          type: boolean
        requiredTier:
          enum:
          - TRIAL
          - BASIC
          - STANDARD
          - PREMIUM
          - BUSINESS_CRITICAL
          type: string
      required:
      - enabled
      - requiredTier
      type: object
    Error:
      properties:
        message:
          type: string
        requestId:
          type: string
        statusCode:
          maximum: 600
          minimum: 400
          type: integer
      required:
      - message
      - requestId
      - statusCode
      type: object
    FeatureFlag:
      properties:
        key:
          type: string
        value:
          type: boolean
      required:
      - key
      - value
      type: object
    GenericJSON:
      additionalProperties: true
      type: object
    HasPermissions:
      properties:
        checks:
          items:
            $ref: '#/components/schemas/PermissionCheckResult'
          type: array
      required:
      - checks
      type: object
    HasPermissionsRequest:
      properties:
        checks:
          items:
            $ref: '#/components/schemas/PermissionCheckRequest'
          type: array
      required:
      - checks
      type: object
    HostedDeploymentSpec:
      properties:
        defaultTaskPodCpu:
          description: Must be valid kubernetes cpu resource string, at least 0.25
            in terms of cpu cores
          type: string
        defaultTaskPodMemory:
          description: Must be valid kubernetes memory resource string, at least 0.5Gi
            in terms of Gibibytes (GiB)
          type: string
        isHighAvailability:
          description: If true, deployment will have backup components
          type: boolean
        resourceQuotaCpu:
          description: Must be valid kubernetes cpu resource string, at least 1 in
            terms of cpu cores
          type: string
        resourceQuotaMemory:
          description: Must be valid kubernetes memory resource string, at least 2Gi
            in terms of Gibibytes (GiB)
          type: string
        schedulerSize:
          description: 'Size of scheduler, one of: small, medium, large'
          enum:
          - small
          - medium
          - large
          type: string
        workerQueues:
          description: At least one worker queue must be specified
          items:
            $ref: '#/components/schemas/MutateWorkerQueueRequest'
          minItems: 1
          type: array
      required:
      - defaultTaskPodCpu
      - defaultTaskPodMemory
      - isHighAvailability
      - resourceQuotaCpu
      - resourceQuotaMemory
      - schedulerSize
      - workerQueues
      type: object
    HybridDeploymentSpec:
      properties:
        scheduler:
          $ref: '#/components/schemas/DeploymentInstanceSpecRequest'
        workerQueues:
          items:
            $ref: '#/components/schemas/MutateWorkerQueueRequest'
          minItems: 1
          type: array
      required:
      - scheduler
      - workerQueues
      type: object
    Invite:
      properties:
        expiresAt:
          type: string
        inviteId:
          type: string
        invitee:
          $ref: '#/components/schemas/BasicSubjectProfile'
        inviter:
          $ref: '#/components/schemas/BasicSubjectProfile'
        oAuthInviteId:
          type: string
        orgName:
          description: 'Deprecated: orgName has been replaced with organizationName'
          type: string
        orgShortName:
          description: 'Deprecated: orgShortName has been replaced with organizationShortName'
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        organizationShortName:
          type: string
        ticketId:
          type: string
        userId:
          type: string
      required:
      - expiresAt
      - inviteId
      - invitee
      - inviter
      - organizationId
      type: object
    ListApiTokensPaginated:
      properties:
        apiTokens:
          items:
            $ref: '#/components/schemas/ApiToken'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - apiTokens
      - limit
      - offset
      - totalCount
      type: object
    ListWorkspaceDags:
      properties:
        items:
          items:
            $ref: '#/components/schemas/WorkspaceDag'
          type: array
        nextCursor:
          type: string
        previousCursor:
          type: string
        totalCount:
          type: integer
        warnings:
          items:
            type: string
          type: array
      required:
      - items
      type: object
    MachineSpec:
      properties:
        cpu:
          description: A slice of CPU expressed in number of core.
          type: number
        ephemeralStorage:
          description: A slice of Ephemeral Storage expressed in Gibibytes (GiB).
          type: integer
        memory:
          description: A slice of Memory expressed in Gibibytes (GiB).
          type: number
      required:
      - cpu
      - memory
      type: object
    ManagedDomain:
      properties:
        createdAt:
          format: date-time
          type: string
        enforcedLogins:
          items:
            type: string
          type: array
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
        status:
          enum:
          - PENDING
          - VERIFIED
          type: string
        updatedAt:
          format: date-time
          type: string
      required:
      - createdAt
      - id
      - name
      - organizationId
      - status
      - updatedAt
      type: object
    MutateConnectionRequest:
      properties:
        connectionName:
          type: string
        extra:
          additionalProperties:
            type: string
          type: object
        host:
          type: string
        login:
          type: string
        password:
          type: string
        port:
          type: integer
        schema:
          type: string
        type:
          type: string
      required:
      - connectionName
      - type
      type: object
    MutateOrgTeamRoleRequest:
      properties:
        role:
          type: string
      required:
      - role
      type: object
    MutateOrgUserRoleRequest:
      properties:
        role:
          type: string
      required:
      - role
      type: object
    MutateVRRequirementsRequest:
      properties:
        requirements:
          items:
            type: string
          type: array
      required:
      - requirements
      type: object
    MutateVRVariablesRequest:
      properties:
        variables:
          items:
            $ref: '#/components/schemas/VRVariableRequest'
          type: array
      required:
      - variables
      type: object
    MutateVirtualRuntimeRequest:
      properties:
        description:
          type: string
        name:
          type: string
        taskMemGib:
          type: number
      required:
      - name
      - taskMemGib
      type: object
    MutateWorkerQueueRequest:
      properties:
        astroMachine:
          type: string
        id:
          type: string
        isDefault:
          type: boolean
        maxWorkerCount:
          minimum: 1
          type: integer
        minWorkerCount:
          minimum: 0
          type: integer
        name:
          maxLength: 63
          type: string
        nodePoolId:
          type: string
        workerConcurrency:
          minimum: 1
          type: integer
      required:
      - isDefault
      - maxWorkerCount
      - minWorkerCount
      - name
      - workerConcurrency
      type: object
    MutateWorkspaceTeamRoleRequest:
      properties:
        role:
          type: string
      required:
      - role
      type: object
    MutateWorkspaceUserRoleRequest:
      properties:
        role:
          type: string
      required:
      - role
      type: object
    NodePool:
      properties:
        cloudProvider:
          type: string
        clusterId:
          type: string
        createdAt:
          format: date-time
          type: string
        id:
          type: string
        isDefault:
          type: boolean
        maxNodeCount:
          type: integer
        name:
          type: string
        nodeInstanceType:
          type: string
        supportedAstroMachines:
          items:
            type: string
          type: array
        updatedAt:
          format: date-time
          type: string
      required:
      - cloudProvider
      - clusterId
      - createdAt
      - id
      - isDefault
      - maxNodeCount
      - name
      - nodeInstanceType
      - updatedAt
      type: object
    Organization:
      properties:
        authServiceId:
          type: string
        billingEmail:
          type: string
        createdAt:
          format: date-time
          type: string
        createdBy:
          type: string
        createdBySubject:
          $ref: '#/components/schemas/BasicSubjectProfile'
        domains:
          items:
            type: string
          type: array
        entitlements:
          additionalProperties:
            $ref: '#/components/schemas/Entitlement'
          type: object
        id:
          type: string
        isAzureManaged:
          type: boolean
        isScimEnabled:
          type: boolean
        managedDomains:
          items:
            $ref: '#/components/schemas/ManagedDomain'
          type: array
        metronomeId:
          type: string
        metronomePlanId:
          type: string
        name:
          type: string
        paymentMethod:
          enum:
          - CREDIT_CARD
          - INVOICE
          - AWS_MARKETPLACE
          - AZURE_MARKETPLACE
          - GCP_MARKETPLACE
          type: string
        product:
          enum:
          - HOSTED
          - HYBRID
          type: string
        salesforceId:
          type: string
        shortName:
          type: string
        status:
          enum:
          - ACTIVE
          - INACTIVE
          - SUSPENDED
          type: string
        stripeId:
          type: string
        stripePaymentMethodId:
          type: string
        supportPlan:
          enum:
          - INTERNAL
          - POV
          - TRIAL
          - BASIC
          - STANDARD
          - PREMIUM
          - BUSINESS_CRITICAL
          type: string
        trialExpiresAt:
          format: date-time
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          type: string
        updatedBySubject:
          $ref: '#/components/schemas/BasicSubjectProfile'
        usesCustomMetronomePlan:
          type: boolean
      required:
      - authServiceId
      - createdAt
      - id
      - isScimEnabled
      - name
      - shortName
      - supportPlan
      - updatedAt
      type: object
    Permission:
      properties:
        action:
          type: string
      required:
      - action
      type: object
    PermissionCheckRequest:
      properties:
        permission:
          $ref: '#/components/schemas/PermissionRequest'
        scope:
          $ref: '#/components/schemas/ScopeRequest'
      required:
      - permission
      - scope
      type: object
    PermissionCheckResult:
      properties:
        authorized:
          type: boolean
        permission:
          $ref: '#/components/schemas/Permission'
        scope:
          $ref: '#/components/schemas/Scope'
        subject:
          $ref: '#/components/schemas/Subject'
      required:
      - authorized
      - permission
      - scope
      - subject
      type: object
    PermissionRequest:
      properties:
        action:
          type: string
      required:
      - action
      type: object
    PostDagRun:
      properties:
        conf: {}
        dagId:
          type: string
        dagRunId:
          type: string
        endDate:
          format: date-time
          type: string
        externalTrigger:
          type: boolean
        logicalDate:
          format: date-time
          type: string
        startDate:
          format: date-time
          type: string
        state:
          type: string
      type: object
    PostDagRunRequest:
      properties:
        logical_date:
          type: string
      type: object
    ProviderInstanceType:
      properties:
        cpu:
          type: integer
        name:
          type: string
        ram:
          type: string
      required:
      - cpu
      - name
      - ram
      type: object
    ProviderRegion:
      properties:
        bannedInstances:
          items:
            type: string
          type: array
        limited:
          type: boolean
        name:
          type: string
      required:
      - name
      type: object
    ResourceOption:
      properties:
        cpu:
          $ref: '#/components/schemas/ResourceRange'
        memory:
          $ref: '#/components/schemas/ResourceRange'
      required:
      - cpu
      - memory
      type: object
    ResourceQuotaOptions:
      properties:
        defaultPodSize:
          $ref: '#/components/schemas/ResourceOption'
        resourceQuota:
          $ref: '#/components/schemas/ResourceOption'
      required:
      - defaultPodSize
      - resourceQuota
      type: object
    ResourceRange:
      properties:
        ceiling:
          type: number
        default:
          type: number
        floor:
          type: number
      required:
      - ceiling
      - default
      - floor
      type: object
    RuntimeRelease:
      properties:
        airflowDatabaseMigration:
          type: boolean
        airflowVersion:
          type: string
        channel:
          type: string
        releaseDate:
          type: string
        stellarDatabaseMigration:
          type: boolean
        version:
          type: string
      required:
      - airflowDatabaseMigration
      - airflowVersion
      - channel
      - releaseDate
      - stellarDatabaseMigration
      - version
      type: object
    SchedulerMachine:
      properties:
        name:
          description: The name of this machine.
          type: string
        spec:
          $ref: '#/components/schemas/MachineSpec'
      required:
      - name
      - spec
      type: object
    Scope:
      properties:
        entityId:
          type: string
        type:
          type: string
      required:
      - entityId
      - type
      type: object
    ScopeRequest:
      properties:
        entityId:
          type: string
        type:
          type: string
      required:
      - entityId
      - type
      type: object
    Self:
      properties:
        avatarUrl:
          type: string
        colorModePreference:
          type: string
        createdAt:
          format: date-time
          type: string
        featureFlags:
          items:
            $ref: '#/components/schemas/FeatureFlag'
          type: array
        fullName:
          type: string
        id:
          type: string
        intercomUserHash:
          type: string
        invites:
          items:
            $ref: '#/components/schemas/Invite'
          type: array
        organizationId:
          type: string
        roles:
          items:
            $ref: '#/components/schemas/UserRole'
          type: array
        signupType:
          enum:
          - trial
          - regular
          type: string
        status:
          type: string
        systemRole:
          type: string
        updatedAt:
          format: date-time
          type: string
        username:
          type: string
      required:
      - avatarUrl
      - createdAt
      - fullName
      - id
      - status
      - updatedAt
      - username
      type: object
    SharedCluster:
      properties:
        cloudProvider:
          enum:
          - aws
          - gcp
          - azure
          type: string
        createdAt:
          format: date-time
          type: string
        dbInstanceType:
          type: string
        id:
          type: string
        isCordoned:
          type: boolean
        isDryRun:
          type: boolean
        metadata:
          $ref: '#/components/schemas/ClusterMetadata'
        name:
          type: string
        podSubnetRange:
          type: string
        region:
          type: string
        servicePeeringRange:
          type: string
        serviceSubnetRange:
          type: string
        status:
          enum:
          - CREATING
          - CREATED
          - CREATE_FAILED
          - UPDATING
          - DELETING
          - DELETED
          - DELETE_FAILED
          - FORCE_DELETED
          type: string
        templateVersion:
          type: string
        updatedAt:
          format: date-time
          type: string
        vpcSubnetRange:
          type: string
      required:
      - cloudProvider
      - createdAt
      - dbInstanceType
      - id
      - isDryRun
      - metadata
      - name
      - podSubnetRange
      - region
      - servicePeeringRange
      - serviceSubnetRange
      - status
      - templateVersion
      - updatedAt
      - vpcSubnetRange
      type: object
    Subject:
      properties:
        entityId:
          type: string
        type:
          type: string
      required:
      - entityId
      - type
      type: object
    Team:
      properties:
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        description:
          type: string
        id:
          type: string
        isIdpManaged:
          type: boolean
        members:
          items:
            $ref: '#/components/schemas/TeamMember'
          type: array
        membersCount:
          type: integer
        name:
          type: string
        organizationId:
          type: string
        organizationRole:
          type: string
        roles:
          items:
            $ref: '#/components/schemas/TeamRole'
          type: array
        rolesCount:
          type: integer
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
      required:
      - createdAt
      - id
      - isIdpManaged
      - name
      - organizationId
      - organizationRole
      - updatedAt
      type: object
    TeamMember:
      properties:
        avatarUrl:
          type: string
        createdAt:
          type: string
        fullName:
          type: string
        userId:
          type: string
        username:
          type: string
      required:
      - userId
      - username
      type: object
    TeamRole:
      properties:
        entityId:
          type: string
        entityType:
          type: string
        role:
          type: string
      required:
      - entityId
      - entityType
      - role
      type: object
    TeamsPaginated:
      properties:
        limit:
          type: integer
        offset:
          type: integer
        teams:
          items:
            $ref: '#/components/schemas/Team'
          type: array
        totalCount:
          type: integer
      required:
      - limit
      - offset
      - teams
      - totalCount
      type: object
    TemplateVersion:
      properties:
        url:
          type: string
        version:
          type: string
      required:
      - version
      type: object
    TransferDeploymentRequest:
      properties:
        currentWorkspaceId:
          type: string
        targetWorkspaceId:
          type: string
      required:
      - currentWorkspaceId
      - targetWorkspaceId
      type: object
    UpdateAwsClusterRequest:
      properties:
        dbInstanceType:
          type: string
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/UpdateNodePoolRequest'
          type: array
        templateVersion:
          type: string
      required:
      - dbInstanceType
      - k8sTags
      - name
      - nodePools
      - templateVersion
      type: object
    UpdateAzureClusterRequest:
      properties:
        dbInstanceType:
          type: string
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/UpdateNodePoolRequest'
          type: array
        templateVersion:
          type: string
      required:
      - dbInstanceType
      - k8sTags
      - name
      - nodePools
      - templateVersion
      type: object
    UpdateDag:
      properties:
        dagId:
          type: string
        isDagPaused:
          type: boolean
      type: object
    UpdateDeploymentApiTokenRequest:
      properties:
        description:
          maxLength: 500
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        role:
          type: string
      required:
      - description
      - name
      - role
      type: object
    UpdateDeploymentRequest:
      properties:
        contactEmails:
          items:
            type: string
          type: array
        description:
          maxLength: 1000
          type: string
        environmentVariables:
          items:
            $ref: '#/components/schemas/DeploymentEnvironmentVariable'
          type: array
        executor:
          enum:
          - CeleryExecutor
          - KubernetesExecutor
          type: string
        hostedSpec:
          $ref: '#/components/schemas/HostedDeploymentSpec'
        hybridSpec:
          $ref: '#/components/schemas/HybridDeploymentSpec'
        isCicdEnforced:
          type: boolean
        isDagDeployEnabled:
          type: boolean
        name:
          maxLength: 500
          type: string
        type:
          enum:
          - Dedicated
          - Hybrid
          - Standard
          type: string
        workloadIdentity:
          type: string
        workspaceId:
          type: string
      required:
      - contactEmails
      - description
      - environmentVariables
      - executor
      - isCicdEnforced
      - isDagDeployEnabled
      - name
      - type
      - workspaceId
      type: object
    UpdateGcpClusterRequest:
      properties:
        dbInstanceType:
          type: string
        k8sTags:
          items:
            $ref: '#/components/schemas/ClusterTag'
          type: array
        name:
          type: string
        nodePools:
          items:
            $ref: '#/components/schemas/UpdateNodePoolRequest'
          type: array
        templateVersion:
          type: string
      required:
      - dbInstanceType
      - k8sTags
      - name
      - nodePools
      - templateVersion
      type: object
    UpdateInviteRequest:
      properties:
        inviteStatus:
          enum:
          - accept
          - reject
          type: string
      required:
      - inviteStatus
      type: object
    UpdateNodePoolRequest:
      properties:
        id:
          type: string
        isDefault:
          type: boolean
        maxNodeCount:
          type: integer
        name:
          type: string
        nodeInstanceType:
          type: string
      required:
      - isDefault
      - maxNodeCount
      - name
      - nodeInstanceType
      type: object
    UpdateOrganizationApiTokenRequest:
      properties:
        description:
          maxLength: 500
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        roles:
          $ref: '#/components/schemas/UpdateOrganizationApiTokenRolesRequest'
      required:
      - description
      - name
      - roles
      type: object
    UpdateOrganizationApiTokenRolesRequest:
      properties:
        organization:
          type: string
        workspace:
          items:
            $ref: '#/components/schemas/ApiTokenWorkspaceRoleRequest'
          type: array
      required:
      - organization
      type: object
    UpdateOrganizationRequest:
      properties:
        billingEmail:
          type: string
        isScimEnabled:
          type: boolean
        name:
          maxLength: 50
          minLength: 3
          type: string
      required:
      - billingEmail
      - isScimEnabled
      - name
      type: object
    UpdateTeamRequest:
      properties:
        description:
          type: string
        name:
          type: string
      required:
      - description
      - name
      type: object
    UpdateWorkspaceApiTokenRequest:
      properties:
        description:
          maxLength: 500
          type: string
        name:
          maxLength: 256
          minLength: 1
          type: string
        role:
          type: string
      required:
      - description
      - name
      - role
      type: object
    UpdateWorkspaceRequest:
      properties:
        apiKeyOnlyDeploymentsDefault:
          type: boolean
        description:
          type: string
        name:
          maxLength: 50
          type: string
      required:
      - apiKeyOnlyDeploymentsDefault
      - name
      type: object
    User:
      properties:
        avatarUrl:
          type: string
        colorModePreference:
          type: string
        createdAt:
          format: date-time
          type: string
        fullName:
          type: string
        id:
          type: string
        invites:
          items:
            $ref: '#/components/schemas/Invite'
          type: array
        lastLogin:
          description: Only shown if admin listing users
          type: string
        lastLoginConnectionName:
          description: Only shown if admin listing users
          type: string
        lastLoginConnectionType:
          description: Only shown if admin listing users
          type: string
        loginsCount:
          description: Only shown if admin listing users
          type: integer
        orgCount:
          description: Only shown if admin listing users
          type: integer
        orgRole:
          description: Only shown if listing org users
          type: string
        orgUserRelationIsIdpManaged:
          description: Only shown if listing org users
          type: boolean
        roles:
          description: Only shown if admin listing users
          items:
            $ref: '#/components/schemas/UserRole'
          type: array
        status:
          type: string
        systemRole:
          description: Only shown if admin listing users
          type: string
        updatedAt:
          format: date-time
          type: string
        username:
          type: string
        workspaceCount:
          description: Only shown if admin listing users
          type: integer
        workspaceRole:
          description: Only shown if listing workspace users
          type: string
      required:
      - avatarUrl
      - createdAt
      - fullName
      - id
      - status
      - updatedAt
      - username
      type: object
    UserRole:
      properties:
        role:
          type: string
        scope:
          $ref: '#/components/schemas/Scope'
        subject:
          $ref: '#/components/schemas/Subject'
      required:
      - role
      - scope
      - subject
      type: object
    UsersPaginated:
      properties:
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
        users:
          items:
            $ref: '#/components/schemas/User'
          type: array
      required:
      - limit
      - offset
      - totalCount
      - users
      type: object
    VRDagRunTaskInstancesPaginated:
      properties:
        limit:
          type: integer
        offset:
          type: integer
        taskInstances:
          items:
            $ref: '#/components/schemas/DagRunTaskInstance'
          type: array
        totalCount:
          type: integer
      type: object
    VRDagRunsPaginated:
      properties:
        dagRuns:
          items:
            $ref: '#/components/schemas/VirtualRuntimeDagRun'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - dagRuns
      - limit
      - offset
      - totalCount
      type: object
    VRDagsPaginated:
      properties:
        dags:
          items:
            $ref: '#/components/schemas/VirtualRuntimeDag'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - dags
      - limit
      - offset
      - totalCount
      type: object
    VRImportErrorsPaginated:
      properties:
        importErrors:
          items:
            $ref: '#/components/schemas/VirtualRuntimeImportError'
          type: array
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
      required:
      - importErrors
      - limit
      - offset
      - totalCount
      type: object
    VRRequirements:
      properties:
        desiredRequirements:
          items:
            type: string
          type: array
        requirements:
          items:
            type: string
          type: array
        validationStatus:
          type: string
      required:
      - desiredRequirements
      - requirements
      - validationStatus
      type: object
    VRVariable:
      properties:
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: '#/components/schemas/BasicSubjectProfile'
        isSecret:
          type: boolean
        key:
          type: string
        updatedAt:
          format: date-time
          type: string
        updatedByUser:
          $ref: '#/components/schemas/BasicSubjectProfile'
        value:
          type: string
      required:
      - createdAt
      - createdByUser
      - isSecret
      - key
      - updatedAt
      - updatedByUser
      type: object
    VRVariableRequest:
      properties:
        isSecret:
          type: boolean
        key:
          type: string
        value:
          type: string
      required:
      - isSecret
      - key
      type: object
    VRVariables:
      properties:
        variables:
          items:
            $ref: '#/components/schemas/VRVariable'
          type: array
      required:
      - variables
      type: object
    VirtualRuntime:
      properties:
        baseImage:
          type: string
        clusterId:
          type: string
        connections:
          items:
            $ref: '#/components/schemas/Connection'
          type: array
        createdAt:
          format: date-time
          type: string
        createdByUser:
          $ref: '#/components/schemas/BasicSubjectProfile'
        deletedAt:
          format: date-time
          type: string
        description:
          type: string
        id:
          type: string
        name:
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        organizationShortName:
          type: string
        releaseName:
          type: string
        requirements:
          items:
            type: string
          type: array
        requirementsValidateStatus:
          type: string
        runtimeVersion:
          type: string
        taskMemGib:
          type: number
        updatedAt:
          format: date-time
          type: string
        updatedByUser:
          $ref: '#/components/schemas/BasicSubjectProfile'
        variables:
          items:
            $ref: '#/components/schemas/VRVariable'
          type: array
        webServerIngressHostname:
          type: string
        webServerUrl:
          type: string
        workspaceId:
          type: string
        workspaceName:
          type: string
      required:
      - createdAt
      - createdByUser
      - description
      - id
      - name
      - releaseName
      - taskMemGib
      - updatedAt
      - updatedByUser
      - workspaceId
      type: object
    VirtualRuntimeDag:
      properties:
        dagId:
          type: string
        defaultView:
          type: string
        description:
          type: string
        fileToken:
          type: string
        fileloc:
          type: string
        hasImportErrors:
          type: boolean
        hasTaskConcurrencyLimits:
          type: boolean
        isActive:
          type: boolean
        isPaused:
          type: boolean
        isSubdag:
          type: boolean
        lastExpired:
          type: string
        lastParsedTime:
          type: string
        lastPickled:
          type: string
        maxActiveRuns:
          type: integer
        maxActiveTasks:
          type: integer
        nextDagrun:
          type: string
        nextDagrunCreateAfter:
          type: string
        nextDagrunDataIntervalEnd:
          type: string
        nextDagrunDataIntervalStart:
          type: string
        owners:
          items:
            type: string
          type: array
        pickleId:
          type: string
        rootDagId:
          type: string
        scheduleInterval: {}
        schedulerLock:
          type: boolean
        tags:
          items:
            $ref: '#/components/schemas/DagTag'
          type: array
        timetableDescription:
          type: string
      required:
      - dagId
      - fileToken
      - fileloc
      - owners
      type: object
    VirtualRuntimeDagRun:
      properties:
        conf:
          additionalProperties: true
          type: object
        dagId:
          type: string
        dagRunId:
          type: string
        dataIntervalEnd:
          type: string
        dataIntervalStart:
          type: string
        endDate:
          type: string
        externalTrigger:
          type: boolean
        lastPickled:
          type: string
        logicalDate:
          type: string
        runType:
          type: string
        startDate:
          type: string
        state:
          type: string
      required:
      - dagId
      - dagRunId
      type: object
    VirtualRuntimeImportError:
      properties:
        filename:
          type: string
        importErrorId:
          type: integer
        stackTrace:
          type: string
        timestamp:
          type: string
      required:
      - importErrorId
      type: object
    VirtualRuntimesPaginated:
      properties:
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
        virtualRuntimes:
          items:
            $ref: '#/components/schemas/VirtualRuntime'
          type: array
      required:
      - limit
      - offset
      - totalCount
      - virtualRuntimes
      type: object
    WorkerMachine:
      properties:
        concurrency:
          $ref: '#/components/schemas/ResourceRange'
        name:
          description: The name of this machine.
          type: string
        spec:
          $ref: '#/components/schemas/MachineSpec'
      required:
      - concurrency
      - name
      - spec
      type: object
    WorkerQueue:
      properties:
        astroMachine:
          type: string
        id:
          type: string
        isDefault:
          type: boolean
        maxWorkerCount:
          type: integer
        minWorkerCount:
          type: integer
        name:
          type: string
        nodePoolId:
          type: string
        podCpu:
          type: string
        podRam:
          type: string
        podSize:
          description: 'todo: remove if there is no side effects after moving to use
            AstroMachine'
          type: string
        workerConcurrency:
          type: integer
      required:
      - id
      - isDefault
      - maxWorkerCount
      - minWorkerCount
      - name
      - nodePoolId
      - podCpu
      - podRam
      - workerConcurrency
      type: object
    WorkerQueueOptions:
      properties:
        maxWorkers:
          $ref: '#/components/schemas/ResourceRange'
        minWorkers:
          $ref: '#/components/schemas/ResourceRange'
        workerConcurrency:
          $ref: '#/components/schemas/ResourceRange'
      required:
      - maxWorkers
      - minWorkers
      - workerConcurrency
      type: object
    WorkloadIdentityOption:
      properties:
        label:
          type: string
        role:
          type: string
      required:
      - label
      - role
      type: object
    Workspace:
      properties:
        apiKeyOnlyDeploymentsDefault:
          type: boolean
        createdAt:
          format: date-time
          type: string
        createdBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        deploymentCount:
          type: integer
        description:
          type: string
        id:
          type: string
        name:
          type: string
        orgShortName:
          description: 'Deprecated: orgShortName has been replaced with organizationShortName'
          type: string
        organizationId:
          type: string
        organizationName:
          type: string
        organizationShortName:
          type: string
        serverlessRuntimeCount:
          type: integer
        updatedAt:
          format: date-time
          type: string
        updatedBy:
          $ref: '#/components/schemas/BasicSubjectProfile'
        userCount:
          type: integer
      required:
      - apiKeyOnlyDeploymentsDefault
      - createdAt
      - id
      - name
      - organizationId
      - updatedAt
      type: object
    WorkspaceDag:
      properties:
        dagId:
          type: string
        deploymentId:
          type: string
        isActive:
          type: boolean
        isPaused:
          type: boolean
        nextRunAt:
          type: string
        owners:
          items:
            type: string
          type: array
        runs:
          items:
            $ref: '#/components/schemas/WorkspaceDagRun'
          type: array
        schedule:
          $ref: '#/components/schemas/DagSchedule'
        tags:
          items:
            type: string
          type: array
        timetableDescription:
          type: string
      required:
      - dagId
      - deploymentId
      - isPaused
      type: object
    WorkspaceDagRun:
      properties:
        dataIntervalEnd:
          type: string
        dataIntervalStart:
          type: string
        endDate:
          type: string
        logicalDate:
          type: string
        runId:
          type: string
        runType:
          type: string
        startDate:
          type: string
        state:
          type: string
      type: object
    WorkspacesPaginated:
      properties:
        limit:
          type: integer
        offset:
          type: integer
        totalCount:
          type: integer
        workspaces:
          items:
            $ref: '#/components/schemas/Workspace'
          type: array
      required:
      - limit
      - offset
      - totalCount
      - workspaces
      type: object
    internal_RelativeDeltaSchemaWeekday:
      properties:
        int32:
          type: integer
        weekdaySchema:
          $ref: '#/components/schemas/internal_WeekdaySchema'
      type: object
    internal_ScheduleIntervalCronExpression:
      properties:
        value:
          type: string
      type: object
    internal_ScheduleIntervalRelativeDelta:
      properties:
        day:
          type: integer
        days:
          type: integer
        dt1:
          type: string
        dt2:
          type: string
        hour:
          type: integer
        hours:
          type: integer
        leapdays:
          type: integer
        microsecond:
          type: integer
        microseconds:
          type: integer
        minute:
          type: integer
        minutes:
          type: integer
        month:
          type: integer
        months:
          type: integer
        nlyearday:
          type: integer
        second:
          type: integer
        seconds:
          type: integer
        weekday:
          $ref: '#/components/schemas/internal_RelativeDeltaSchemaWeekday'
        weeks:
          type: integer
        year:
          type: integer
        yearday:
          type: integer
        years:
          type: integer
      type: object
    internal_ScheduleIntervalTimeDelta:
      properties:
        days:
          type: integer
        microseconds:
          type: integer
        seconds:
          type: integer
      type: object
    internal_WeekdaySchema:
      properties:
        "n":
          type: integer
        weekday:
          type: integer
      type: object
  securitySchemes:
    JWT:
      in: header
      name: Authorization
      type: apiKey
info:
  contact: {}
  description: Astro Core API
  title: Astro Core API
  version: v1alpha1
openapi: 3.0.3
paths:
  /auth/invites/{inviteId}:
    get:
      description: Get user invite
      operationId: GetUserInvite
      parameters:
      - description: invite ID or auth0 ticket ID
        in: path
        name: inviteId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get user invite
      tags:
      - Invite
      - Auth
  /authz/hasPermissions:
    post:
      description: Get current user permission information
      operationId: HasPermissions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HasPermissionsRequest'
        description: request body for get permissions
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HasPermissions'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get current user permission information
      tags:
      - Authz
  /cluster-options:
    get:
      description: Cluster options
      operationId: GetClusterOptions
      parameters:
      - description: cloud provider
        in: query
        name: provider
        schema:
          enum:
          - aws
          - gcp
          - azure
          type: string
      - description: cluster type
        in: query
        name: type
        required: true
        schema:
          enum:
          - BRING_YOUR_OWN_CLOUD
          - HOSTED
          - VIRTUAL_RUNTIMES
          - SHARED
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/ClusterOptions'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Cluster options
      tags:
      - Options
  /clusters/shared:
    get:
      description: Get a shared cluster for a given provider/region
      operationId: GetSharedCluster
      parameters:
      - description: region
        in: query
        name: region
        required: true
        schema:
          type: string
      - description: cloud provider
        in: query
        name: cloudProvider
        required: true
        schema:
          enum:
          - aws
          - gcp
          - azure
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get a shared cluster for a given provider/region
      tags:
      - Cluster
  /organizations:
    get:
      description: List organizations
      operationId: ListOrganizations
      parameters:
      - description: string to search for when listing users
        in: query
        name: search
        schema:
          type: string
      - description: filter by trial status, null for all orgs
        in: query
        name: trialStatus
        schema:
          enum:
          - all
          - expired
          - active
          - none
          type: string
      - description: filter by support plan, should be one of INTERNAL, POV, TRIAL,
          BASIC, STANDARD, PREMIUM, BUSINESS_CRITICAL, or null for all orgs
        in: query
        name: supportPlan
        schema:
          enum:
          - INTERNAL
          - POV
          - TRIAL
          - BASIC
          - STANDARD
          - PREMIUM
          - BUSINESS_CRITICAL
          type: string
      - description: filter by product, null for all orgs
        in: query
        name: product
        schema:
          enum:
          - HOSTED
          - HYBRID
          type: string
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - supportPlan:asc
            - supportPlan:desc
            - product:asc
            - product:desc
            - shortName:asc
            - shortName:desc
            - authServiceId:asc
            - authServiceId:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Organization'
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List organizations
      tags:
      - Organization
    post:
      description: Create organization
      operationId: CreateOrganization
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationRequest'
        description: request body for creating an organization
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create organization
      tags:
      - Organization
  /organizations/{organizationId}:
    get:
      description: Get organization
      operationId: GetOrganization
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: only look up organization metadata if true
        in: query
        name: isLookUpOnly
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get organization
      tags:
      - Organization
      x-permission:
      - action: organization.get
    post:
      description: Update organization
      operationId: UpdateOrganization
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationRequest'
        description: request body for updating an organization
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Organization'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update organization
      tags:
      - Organization
      x-permission:
      - action: organization.settings.update
  /organizations/{organizationId}/api-tokens:
    get:
      description: List Organization API tokens
      operationId: ListOrganizationApiTokens
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: Offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: Limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: Sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - shortToken:asc
            - shortToken:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - createdById:asc
            - createdById:desc
            - updatedById:asc
            - updatedById:desc
            - tokenStartAt:asc
            - tokenStartAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiTokensPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List Organization API tokens
      tags:
      - ApiToken
      x-permission:
      - action: organization.apiTokens.list
    post:
      description: Create Organization API token
      operationId: CreateOrganizationApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrganizationApiTokenRequest'
        description: request body for creating an organization API token
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create Organization API token
      tags:
      - ApiToken
      x-permission:
      - action: organization.apiTokens.create
  /organizations/{organizationId}/api-tokens/{apiTokenId}:
    delete:
      description: Delete organization API token
      operationId: DeleteOrganizationApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete organization API token
      tags:
      - ApiToken
      x-permission:
      - action: organization.apiTokens.delete
    get:
      description: Get Organization API token
      operationId: GetOrganizationApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get Organization API token
      tags:
      - ApiToken
      x-permission:
      - action: organization.apiTokens.get
    post:
      description: Update Organization API token
      operationId: UpdateOrganizationApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrganizationApiTokenRequest'
        description: request body for updating an organization API token
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update Organization API token
      tags:
      - ApiToken
      x-permission:
      - action: organization.apiTokens.update
  /organizations/{organizationId}/api-tokens/{apiTokenId}/rotate:
    post:
      description: Rotate organization API token
      operationId: RotateOrganizationApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Rotate organization API token
      tags:
      - ApiToken
      x-permission:
      - action: organization.apiTokens.rotate
  /organizations/{organizationId}/audit-logs:
    get:
      description: Get organization audit logs.
      operationId: GetOrganizationAuditLogs
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: starting point in days for audit logs
        in: query
        name: earliest
        schema:
          default: "1"
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: integer
                type: array
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get organization audit logs
      tags:
      - Organization
      x-permission:
      - action: organization.auditLogs.get
  /organizations/{organizationId}/clusters:
    get:
      description: List clusters in an organization
      operationId: ListClusters
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: cloud provider to filter clusters on
        in: query
        name: provider
        schema:
          enum:
          - aws
          - gcp
          - azure
          type: string
      - description: type to filter clusters on
        in: query
        name: types
        schema:
          items:
            enum:
            - HOSTED
            - BRING_YOUR_OWN_CLOUD
            - VIRTUAL_RUNTIMES
            - SHARED
            type: string
          type: array
      - description: statuses to filter clusters on
        in: query
        name: statuses
        schema:
          items:
            enum:
            - CREATING
            - UPDATING
            - CREATED
            - DELETING
            - DELETED
            - CREATE_FAILED
            - DELETE_FAILED
            - FORCE_DELETED
            type: string
          type: array
      - description: string to search for when listing clusters
        in: query
        name: search
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - organizationId:asc
            - organizationId:desc
            - cloudProvider:asc
            - cloudProvider:desc
            - dbInstanceType:asc
            - dbInstanceType:desc
            - podSubnetRange:asc
            - podSubnetRange:desc
            - providerAccount:asc
            - providerAccount:desc
            - region:asc
            - region:desc
            - servicePeeringRange:asc
            - servicePeeringRange:desc
            - serviceSubnetRange:asc
            - serviceSubnetRange:desc
            - templateVersion:asc
            - templateVersion:desc
            - vpcSubnetRange:asc
            - vpcSubnetRange:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClustersPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List clusters
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.list
  /organizations/{organizationId}/clusters/{clusterId}:
    delete:
      description: Delete cluster
      operationId: DeleteCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: cluster ID
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.delete
    get:
      description: Get a cluster in an organization
      operationId: GetCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: cluster ID to fetch
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterDetailed'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get a cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.get
  /organizations/{organizationId}/clusters/aws:
    post:
      description: Create AWS cluster
      operationId: CreateAwsCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAwsClusterRequest'
        description: request body for creating a new AWS cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create AWS cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.create
  /organizations/{organizationId}/clusters/aws/{clusterId}:
    post:
      description: Update AWS cluster
      operationId: UpdateAwsCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: cluster ID
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAwsClusterRequest'
        description: request body for updating an AWS cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update AWS cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.update
  /organizations/{organizationId}/clusters/azure:
    post:
      description: Create Azure cluster
      operationId: CreateAzureCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAzureClusterRequest'
        description: request body for creating a new Azure cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create Azure cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.create
  /organizations/{organizationId}/clusters/azure/{clusterId}:
    post:
      description: Update Azure cluster
      operationId: UpdateAzureCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: cluster ID
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAzureClusterRequest'
        description: request body for updating an Azure cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update Azure cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.update
  /organizations/{organizationId}/clusters/gcp:
    post:
      description: Create GCP cluster
      operationId: CreateGcpCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGcpClusterRequest'
        description: request body for creating a new GCP cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create GCP cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.create
  /organizations/{organizationId}/clusters/gcp/{clusterId}:
    post:
      description: Update GCP cluster
      operationId: UpdateGcpCluster
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: cluster ID
        in: path
        name: clusterId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGcpClusterRequest'
        description: request body for updating a GCP cluster
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cluster'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "412":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Precondition Failed
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update GCP cluster
      tags:
      - Cluster
      x-permission:
      - action: organization.clusters.update
  /organizations/{organizationId}/deployment-options:
    get:
      description: Deployment options
      operationId: GetDeploymentOptions
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: query
        name: deploymentId
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentOptions'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deployment options
      tags:
      - Options
  /organizations/{organizationId}/deployments:
    get:
      description: List deployments
      operationId: ListDeployments
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: IDs that define the deployments
        in: query
        name: deploymentIds
        schema:
          items:
            type: string
          type: array
      - description: IDs that define the workspaces where deployments belong to
        in: query
        name: workspaceIds
        schema:
          items:
            type: string
          type: array
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - releaseName:asc
            - releaseName:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - workspaceId:asc
            - workspaceId:desc
            - clusterId:asc
            - clusterId:desc
            - runtimeVersion:asc
            - runtimeVersion:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List deployments
      tags:
      - Deployment
      x-permission:
      - action: organization.runtimes.list
    post:
      description: Create deployment
      operationId: CreateDeployment
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentRequest'
        description: request body for create a deployment
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create deployment
      tags:
      - Deployment
      x-permission:
      - action: workspace.deployments.create
  /organizations/{organizationId}/deployments/{deploymentId}:
    delete:
      description: Delete deployment
      operationId: DeleteDeployment
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.delete
    get:
      description: Get deployment
      operationId: GetDeployment
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the deployment
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.get
    post:
      description: Update deployment
      operationId: UpdateDeployment
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeploymentRequest'
        description: request body for updating a deployment
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update deployment
      tags:
      - Deployment
      x-permission:
      - action: deployment.update
  /organizations/{organizationId}/deployments/{deploymentId}/api-tokens:
    get:
      description: List Deployment API tokens
      operationId: ListDeploymentApiTokens
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: Offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: Limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          maximum: 1000
          minimum: 0
          type: integer
      - description: Sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - shortToken:asc
            - shortToken:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - createdById:asc
            - createdById:desc
            - updatedById:asc
            - updatedById:desc
            - tokenStartAt:asc
            - tokenStartAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiTokensPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List Deployment API tokens
      tags:
      - ApiToken
      x-permission:
      - action: deployment.apiTokens.list
    post:
      description: Create Deployment API token
      operationId: CreateDeploymentApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the deployment
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeploymentApiTokenRequest'
        description: request body for creating a deployment API token
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create Deployment API token
      tags:
      - ApiToken
      x-permission:
      - action: deployment.apiTokens.create
  /organizations/{organizationId}/deployments/{deploymentId}/api-tokens/{apiTokenId}:
    delete:
      description: Delete Deployment API token
      operationId: DeleteDeploymentApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: api token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete Deployment API token
      tags:
      - ApiToken
      x-permission:
      - action: deployment.apiTokens.delete
    get:
      description: Get Deployment API token
      operationId: GetDeploymentApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get Deployment API token
      tags:
      - ApiToken
      x-permission:
      - action: deployment.apiTokens.get
    post:
      description: Update Deployment API token
      operationId: UpdateDeploymentApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the deployment
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDeploymentApiTokenRequest'
        description: request body for updating a deployment API token
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update Deployment API token
      tags:
      - ApiToken
      x-permission:
      - action: deployment.apiTokens.update
  /organizations/{organizationId}/deployments/{deploymentId}/api-tokens/{apiTokenId}/rotate:
    post:
      description: Rotate Deployment API token
      operationId: RotateDeploymentApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Rotate Deployment API token
      tags:
      - ApiToken
      x-permission:
      - action: deployment.apiTokens.rotate
  /organizations/{organizationId}/deployments/{deploymentId}/deploys:
    get:
      description: List deploys for a deployment
      operationId: ListDeploys
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          maximum: 1000
          minimum: 0
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploysPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List deploys for a deployment
      tags:
      - Deploy
      x-permission:
      - action: deployment.get
  /organizations/{organizationId}/deployments/{deploymentId}/health:
    get:
      description: Get deployment health report
      operationId: GetDeploymentHealth
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID for which to return health information
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenericJSON'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get deployment health
      tags:
      - Deployment
      x-permission:
      - action: deployment.get
  /organizations/{organizationId}/deployments/{deploymentId}/logs:
    get:
      description: Get deployment Logs
      operationId: GetDeploymentLogs
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID to get logs from
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      - description: log sources to select logs from
        in: query
        name: sources
        required: true
        schema:
          items:
            enum:
            - scheduler
            - triggerer
            - worker
            - webserver
            type: string
          type: array
      - description: limit of the count of the logs
        in: query
        name: limit
        schema:
          default: 500
          minimum: 1
          type: integer
      - description: offset of the log entries
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: range of the log search in seconds
        in: query
        name: range
        schema:
          default: 3600
          minimum: 60
          type: integer
      - description: maximum number of results across all pages
        in: query
        name: maxNumResults
        schema:
          default: 10000
          minimum: 1
          type: integer
      - description: searchId to get logs from
        in: query
        name: searchId
        schema:
          type: string
      - description: an exact text search param used to filter the data on
        in: query
        name: searchText
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentLog'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get deployment Logs
      tags:
      - Deployment
      x-permission:
      - action: deployment.metrics.get
  /organizations/{organizationId}/deployments/{deploymentId}/transfer:
    post:
      description: Transfer deployment across workspaces
      operationId: TransferDeployment
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: deployment ID
        in: path
        name: deploymentId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransferDeploymentRequest'
        description: request body for updating a deployment
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Deployment'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Transfer deployment across workspaces
      tags:
      - Deployment
      x-permission:
      - action: deployment.update
  /organizations/{organizationId}/invites:
    post:
      description: Create a user invitation
      operationId: CreateUserInvite
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserInviteRequest'
        description: request body for create user invitation
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create a user invitation
      tags:
      - Invite
      x-permission:
      - action: organization.users.create
  /organizations/{organizationId}/invites/{inviteId}:
    delete:
      description: Delete user invite
      operationId: DeleteUserInvite
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: user invite ID
        in: path
        name: inviteId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete user invite
      tags:
      - Invite
      x-permission:
      - action: organization.users.delete
  /organizations/{organizationId}/teams:
    get:
      description: List teams in an organization
      operationId: ListOrganizationTeams
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - membersCount:asc
            - membersCount:desc
            - workspaceCount:asc
            - workspaceCount:desc
            type: string
          type: array
      - description: string to search for when listing teams
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List teams in an organization
      tags:
      - Team
      x-permission:
      - action: organization.teams.list
    post:
      description: Create team
      operationId: CreateTeam
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTeamRequest'
        description: request body for creating a team
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create team
      tags:
      - Team
      x-permission:
      - action: organization.teams.create
  /organizations/{organizationId}/teams/{teamId}:
    delete:
      description: Delete team
      operationId: DeleteTeam
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete team
      tags:
      - Team
      x-permission:
      - action: organization.teams.delete
    get:
      description: Get team
      operationId: GetTeam
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get team
      tags:
      - Team
      x-permission:
      - action: organization.teams.get
    post:
      description: Update team
      operationId: UpdateTeam
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTeamRequest'
        description: request body for updating a team
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update team
      tags:
      - Team
      x-permission:
      - action: organization.teams.update
  /organizations/{organizationId}/teams/{teamId}/members:
    post:
      description: Add members to a team
      operationId: AddTeamMembers
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddTeamMembersRequest'
        description: request body for adding members to a team
        required: true
        x-originalParamName: body
      responses:
        "200":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Add members to a team
      tags:
      - Team
      x-permission:
      - action: organization.teams.create
  /organizations/{organizationId}/teams/{teamId}/members/{memberId}:
    delete:
      description: Remove member from a team
      operationId: RemoveTeamMember
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      - description: member ID
        in: path
        name: memberId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Remove member from a team
      tags:
      - Team
      x-permission:
      - action: organization.teams.update
  /organizations/{organizationId}/teams/{teamId}/role:
    post:
      description: Mutate an organization role for team
      operationId: MutateOrgTeamRole
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateOrgTeamRoleRequest'
        description: request body for mutating an organization team role
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamRole'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Mutate an organization role for team
      tags:
      - Team
      x-permission:
      - action: organization.teams.update
  /organizations/{organizationId}/users:
    get:
      description: List users in an organization
      operationId: ListOrgUsers
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - username:asc
            - username:desc
            - status:asc
            - status:desc
            - fullName:asc
            - fullName:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - orgRole:asc
            - orgRole:desc
            type: string
          type: array
      - description: string to search for when listing users
        in: query
        name: search
        schema:
          type: string
      - description: filter on users with invites only
        in: query
        name: hasInvites
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List users in an organization
      tags:
      - User
      x-permission:
      - action: organization.users.list
  /organizations/{organizationId}/users/{userId}:
    delete:
      description: Remove user from organization
      operationId: DeleteOrgUser
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: user ID
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Remove user from organization
      tags:
      - User
      x-permission:
      - action: organization.users.delete
    get:
      description: Get user information by user id
      operationId: GetUser
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: user ID
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get user information
      tags:
      - User
      x-permission:
      - action: organization.users.get
  /organizations/{organizationId}/users/{userId}/role:
    post:
      description: Mutate an organization role for user
      operationId: MutateOrgUserRole
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: user ID
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateOrgUserRoleRequest'
        description: request body for mutating an organization user role
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Mutate an organization role for user
      tags:
      - User
      x-permission:
      - action: organization.users.update
  /organizations/{organizationId}/virtual-runtimes:
    get:
      description: Deprecated - List virtual runtimes in a workspace
      operationId: ListVirtualRuntimes
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: IDs that define the workspaces where virtual runtimes belong
          to
        in: query
        name: workspaceIds
        schema:
          items:
            type: string
          type: array
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - releaseName:asc
            - releaseName:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRuntimesPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List virtual runtimes in a workspace
      tags:
      - VirtualRuntime
      x-permission:
      - action: organization.virtualRuntimes.list
  /organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}:
    get:
      description: Deprecated - Get virtual runtime
      operationId: GetVirtualRuntime
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRuntime'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Get virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  /organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/connections:
    get:
      description: Deprecated - List connections for a virtual runtime
      operationId: ListConnections
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - connectionName:asc
            - connectionName:desc
            - scopeId:asc
            - scopeId:desc
            - scopeType:asc
            - scopeType:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - workspaceId:asc
            - workspaceId:desc
            - type:asc
            - type:desc
            - host:asc
            - host:desc
            - port:asc
            - port:desc
            - login:asc
            - login:desc
            - schema:asc
            - schema:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConnectionsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List connections for a virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.connections.list
  /organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/connections/{connectionId}:
    get:
      description: Deprecated - Get connection
      operationId: GetConnection
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the connection
        in: path
        name: connectionId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Get connection
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.connections.get
  /organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/requirements:
    get:
      description: Deprecated - List virtual runtime requirements
      operationId: ListRequirements
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRRequirements'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List virtual runtime requirements
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.configurations.get
  /organizations/{organizationId}/virtual-runtimes/{virtualRuntimeId}/variables:
    get:
      description: Deprecated - List virtual runtime variables
      operationId: ListVariables
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRVariables'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List virtual runtime variables
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.envVars.get
  /organizations/{organizationId}/workspaces:
    get:
      description: List Workspaces
      operationId: ListWorkspaces
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: list of workspace ids to get detail of
        in: query
        name: workspaceIds
        schema:
          items:
            type: string
          type: array
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - organizationId:asc
            - organizationId:desc
            type: string
          type: array
      - description: string to search for when listing workspaces
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspacesPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List Workspaces
      tags:
      - Workspace
      x-permission:
      - action: organization.workspaces.list
    post:
      description: Create workspace
      operationId: CreateWorkspace
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceRequest'
        description: request body for creating a new workspace
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create workspace
      tags:
      - Workspace
      x-permission:
      - action: organization.workspaces.create
  /organizations/{organizationId}/workspaces/{workspaceId}:
    delete:
      description: Delete workspace
      operationId: DeleteWorkspace
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete workspace
      tags:
      - Workspace
      x-permission:
      - action: workspace.delete
    get:
      description: Get workspace with id
      operationId: GetWorkspace
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get workspace with id
      tags:
      - Workspace
      x-permission:
      - action: workspace.get
    post:
      description: Update workspace
      operationId: UpdateWorkspace
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
        description: request body for updating a workspace
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update workspace
      tags:
      - Workspace
      x-permission:
      - action: workspace.settings.update
  /organizations/{organizationId}/workspaces/{workspaceId}/api-tokens:
    get:
      description: List Workspace API tokens
      operationId: ListWorkspaceApiTokens
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: Offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: Limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: Sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - shortToken:asc
            - shortToken:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - createdById:asc
            - createdById:desc
            - updatedById:asc
            - updatedById:desc
            - tokenStartAt:asc
            - tokenStartAt:desc
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListApiTokensPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List Workspace API tokens
      tags:
      - ApiToken
      x-permission:
      - action: workspace.apiTokens.list
    post:
      description: Create Workspace API token
      operationId: CreateWorkspaceApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceApiTokenRequest'
        description: request body for creating a workspace API token
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Create Workspace API token
      tags:
      - ApiToken
      x-permission:
      - action: workspace.apiTokens.create
  /organizations/{organizationId}/workspaces/{workspaceId}/api-tokens/{apiTokenId}:
    delete:
      description: Delete Workspace API token
      operationId: DeleteWorkspaceApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the API token
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Delete Workspace API token
      tags:
      - ApiToken
      x-permission:
      - action: workspace.apiTokens.delete
    get:
      description: Get Workspace API token
      operationId: GetWorkspaceApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get Workspace API token
      tags:
      - ApiToken
      x-permission:
      - action: workspace.apiTokens.get
    post:
      description: Update Workspace API token
      operationId: UpdateWorkspaceApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceApiTokenRequest'
        description: request body for updating a workspace API token
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update Workspace API token
      tags:
      - ApiToken
      x-permission:
      - action: workspace.apiTokens.update
  /organizations/{organizationId}/workspaces/{workspaceId}/api-tokens/{apiTokenId}/rotate:
    post:
      description: Rotate Workspace API token
      operationId: RotateWorkspaceApiToken
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: API token ID
        in: path
        name: apiTokenId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiToken'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Rotate Workspace API token
      tags:
      - ApiToken
      x-permission:
      - action: workspace.apiTokens.rotate
  /organizations/{organizationId}/workspaces/{workspaceId}/dag-filters:
    get:
      description: List all tag, owner and deployment names/IDs by which DAGs can
        be filtered
      operationId: ListWorkspaceDagFilters
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DagFilters'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List all tag, owner and deployment names/IDs
      tags:
      - Workspace
      x-permission:
      - action: workspace.pipelines.list
  /organizations/{organizationId}/workspaces/{workspaceId}/dags:
    get:
      description: List all dags in a workspace for all deployments
      operationId: ListWorkspaceDags
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: page size, default of 20
        in: query
        name: pageSize
        schema:
          maximum: 100
          minimum: 1
          type: integer
      - description: order-by fields, comma separated
        in: query
        name: orderBy
        schema:
          items:
            type: string
          type: array
      - description: pagination cursor
        in: query
        name: cursor
        schema:
          type: string
      - description: number of runs to include per dag, default of 0
        in: query
        name: numRuns
        schema:
          maximum: 50
          minimum: 0
          type: integer
      - description: filter by name of DAG (dagId)
        in: query
        name: name
        schema:
          type: string
      - description: filter by pattern for name of DAG (dagId),  SQL  syntax
        in: query
        name: name__like
        schema:
          type: string
      - description: filter by an owner of the dag
        in: query
        name: owner
        schema:
          type: string
      - description: filter by paused dags
        in: query
        name: isPaused
        schema:
          type: boolean
      - description: filter by active dags
        in: query
        name: isActive
        schema:
          type: boolean
      - description: filter by dag runs with any of these run states for its last
          run
        in: query
        name: lastRunState__in
        schema:
          items:
            type: string
          type: array
      - description: filter by dag runs with any of these run states
        in: query
        name: runState__in
        schema:
          items:
            type: string
          type: array
      - description: filter by dag run after specified datetime (RFC3339 format)
        in: query
        name: runAfter
        schema:
          format: date-time
          type: string
      - description: filter by any of these tags
        in: query
        name: tag__in
        schema:
          items:
            type: string
          type: array
      - description: filter by any of these deployment IDs
        in: query
        name: deploymentId__in
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListWorkspaceDags'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List all dags in a workspace
      tags:
      - Workspace
      x-permission:
      - action: workspace.pipelines.list
  /organizations/{organizationId}/workspaces/{workspaceId}/teams:
    get:
      description: List teams in a workspace
      operationId: ListWorkspaceTeams
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - name:asc
            - name:desc
            - description:asc
            - description:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - workspaceRoles:asc
            - workspaceRoles:desc
            type: string
          type: array
      - description: string to search for when listing teams
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List teams in a workspace
      tags:
      - Team
      x-permission:
      - action: organization.teams.list
  /organizations/{organizationId}/workspaces/{workspaceId}/teams/{teamId}:
    delete:
      description: Remove team from a workspace
      operationId: DeleteWorkspaceTeam
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Remove team from a workspace
      tags:
      - Team
      x-permission:
      - action: workspace.members.delete
  /organizations/{organizationId}/workspaces/{workspaceId}/teams/{teamId}/role:
    post:
      description: Mutate a workspace role for a team
      operationId: MutateWorkspaceTeamRole
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: team ID
        in: path
        name: teamId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateWorkspaceTeamRoleRequest'
        description: request body for mutating a workspace team role
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TeamRole'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Mutate a workspace role for a team
      tags:
      - Team
      x-permission:
      - action: workspace.members.create
  /organizations/{organizationId}/workspaces/{workspaceId}/users:
    get:
      description: List users in a workspace
      operationId: ListWorkspaceUsers
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: sorting criteria, each criterion should conform to format 'fieldName:asc'
          or 'fieldName:desc'
        in: query
        name: sorts
        schema:
          items:
            enum:
            - id:asc
            - id:desc
            - username:asc
            - username:desc
            - status:asc
            - status:desc
            - fullName:asc
            - fullName:desc
            - createdAt:asc
            - createdAt:desc
            - updatedAt:asc
            - updatedAt:desc
            - workspaceRole:asc
            - workspaceRole:desc
            type: string
          type: array
      - description: string to search for when listing users
        in: query
        name: search
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: List users in a workspace
      tags:
      - User
      x-permission:
      - action: workspace.users.list
  /organizations/{organizationId}/workspaces/{workspaceId}/users/{userId}:
    delete:
      description: Remove user from workspace
      operationId: DeleteWorkspaceUser
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: user ID
        in: path
        name: userId
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Remove user from workspace
      tags:
      - User
      x-permission:
      - action: workspace.users.delete
  /organizations/{organizationId}/workspaces/{workspaceId}/users/{userId}/role:
    post:
      description: Mutate a workspace role for user
      operationId: MutateWorkspaceUserRole
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: workspace ID
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: user ID
        in: path
        name: userId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateWorkspaceUserRoleRequest'
        description: request body for mutating an organization user role
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserRole'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Mutate a workspace role for user
      tags:
      - User
      x-permission:
      - action: workspace.users.update
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes:
    post:
      description: Deprecated - Create virtual runtime
      operationId: CreateVirtualRuntime
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateVirtualRuntimeRequest'
        description: request body for creating a virtual runtime
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRuntime'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Create virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: workspace.virtualRuntimes.create
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}:
    delete:
      description: Deprecated - Delete virtual runtime
      operationId: DeleteVirtualRuntime
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Delete virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.delete
    post:
      description: Deprecated - Update virtual runtime
      operationId: UpdateVirtualRuntime
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateVirtualRuntimeRequest'
        description: request body for updating a virtual runtime
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VirtualRuntime'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Update virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.update
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/connections:
    post:
      description: Deprecated - Create connection
      operationId: CreateConnection
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateConnectionRequest'
        description: request body for creating a new connection
        required: true
        x-originalParamName: data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Create connection
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.connections.create
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/connections/{connectionId}:
    delete:
      description: Deprecated - Delete connection
      operationId: DeleteConnection
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the connection
        in: path
        name: connectionId
        required: true
        schema:
          type: string
      responses:
        "204":
          description: ""
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Delete connection
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.connections.delete
    post:
      description: Deprecated - Update connection
      operationId: UpdateConnection
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the connection
        in: path
        name: connectionId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateConnectionRequest'
        description: request body for updating a connection
        required: true
        x-originalParamName: data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Update connection
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.connections.update
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags:
    get:
      description: Deprecated - List all dags in a virtual runtime
      operationId: ListVRDags
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 1
          type: integer
      - description: order list by the field name
        in: query
        name: orderBy
        schema:
          type: string
      - description: tags
        in: query
        name: tags
        schema:
          type: string
      - description: show only active dags
        in: query
        name: onlyActive
        schema:
          type: boolean
      - description: show dags that match this pattern
        in: query
        name: dagIdPattern
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRDagsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List all dags in a virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/pause:
    post:
      description: 'Deprecated - API provides a simple way for a dag to be updated
        with is_paused: true'
      operationId: PauseDag
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the dag
        in: path
        name: dagId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDag'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Pause a dag
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/resume:
    post:
      description: Deprecated - API provides a way to update the is_paused field on
        a Dag
      operationId: ResumeDag
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the dag
        in: path
        name: dagId
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDag'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Deprecated - Update a dag
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/run:
    post:
      description: Deprecated - Triggers a dag run
      operationId: PostDagRun
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the dag
        in: path
        name: dagId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostDagRunRequest'
        description: request body for trigger a dag run
        required: true
        x-originalParamName: data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostDagRun'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Triggers a dag run
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/runs:
    get:
      description: Deprecated - List dag runs for a dag in a virtual runtime
      operationId: ListVRDagRuns
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the dag
        in: path
        name: dagId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: order list by the field name
        in: query
        name: orderBy
        schema:
          type: string
      - description: list of state of dag runs, separated by comma (OR condition)
        in: query
        name: state
        schema:
          type: string
      - description: returns runs executed on date greater than or equal to specified
          date
        in: query
        name: executionDateGte
        schema:
          format: date-time
          type: string
      - description: returns runs executed on date less than or equal to specified
          date
        in: query
        name: executionDateLte
        schema:
          format: date-time
          type: string
      - description: returns runs started on date greater than or equal to specified
          date
        in: query
        name: startDateGte
        schema:
          format: date-time
          type: string
      - description: returns runs started on date less than or equal to specified
          date
        in: query
        name: startDateLte
        schema:
          format: date-time
          type: string
      - description: returns runs ended on date greater than or equal to specified
          date
        in: query
        name: endDateGte
        schema:
          format: date-time
          type: string
      - description: returns runs ended on date less than or equal to specified date
        in: query
        name: endDateLte
        schema:
          format: date-time
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRDagRunsPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List dag runs for a dag in a virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  ? /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/dags/{dagId}/runs/{dagRunId}/task-instances
  : get:
      description: Deprecated - List task instances for dag run in a virtual runtime
      operationId: ListVRDagRunTaskInstances
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: ID of the dag
        in: path
        name: dagId
        required: true
        schema:
          type: string
      - description: ID of the dag run
        in: path
        name: dagRunId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 0
          type: integer
      - description: execution date is greater or equal to the specified date
        in: query
        name: executionDateGte
        schema:
          format: date-time
          type: string
      - description: execution date is less than or equal to the specified date
        in: query
        name: executionDateLte
        schema:
          format: date-time
          type: string
      - description: start date is greater than or equal to the specified date
        in: query
        name: startDateGte
        schema:
          format: date-time
          type: string
      - description: start date is less than or equal to the specified date
        in: query
        name: startDateLte
        schema:
          format: date-time
          type: string
      - description: end date is greater than or equal to the specified date
        in: query
        name: endDateGte
        schema:
          format: date-time
          type: string
      - description: end date is less than or equal to the specified date
        in: query
        name: endDateLte
        schema:
          format: date-time
          type: string
      - description: duration is greater than or equal to the specified in seconds
        in: query
        name: durationSecGte
        schema:
          type: number
      - description: duration is less than or equal to the specified in seconds
        in: query
        name: durationSecLte
        schema:
          type: number
      - description: task states
        in: query
        name: states
        schema:
          items:
            type: string
          type: array
      - description: task pools
        in: query
        name: pools
        schema:
          items:
            type: string
          type: array
      - description: task queues
        in: query
        name: queues
        schema:
          items:
            type: string
          type: array
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRDagRunTaskInstancesPaginated'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List task instances for dag run in a virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/import-errors:
    get:
      description: Deprecated - List all import errors in a virtual runtime
      operationId: ListVRImportErrors
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      - description: offset for pagination
        in: query
        name: offset
        schema:
          default: 0
          minimum: 0
          type: integer
      - description: limit for pagination
        in: query
        name: limit
        schema:
          default: 20
          minimum: 1
          type: integer
      - description: order list by the field name
        in: query
        name: orderBy
        schema:
          enum:
          - import_error_id
          - timestamp
          - filename
          - stack_trace
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRImportErrorsPaginated'
          description: OK
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - List all import errors in a virtual runtime
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.get
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/requirements:
    post:
      description: Deprecated - Mutate virtual runtime requirements
      operationId: MutateRequirements
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateVRRequirementsRequest'
        description: request body for mutating virtual runtime requirements
        required: true
        x-originalParamName: data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRRequirements'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Mutate virtual runtime requirements
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.configurations.update
  /organizations/{organizationId}/workspaces/{workspaceId}/virtual-runtimes/{virtualRuntimeId}/variables:
    post:
      description: Deprecated - Mutate virtual runtime variables
      operationId: MutateVariables
      parameters:
      - description: organization ID
        in: path
        name: organizationId
        required: true
        schema:
          type: string
      - description: ID of the workspace
        in: path
        name: workspaceId
        required: true
        schema:
          type: string
      - description: ID of the virtual runtime
        in: path
        name: virtualRuntimeId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MutateVRVariablesRequest'
        description: request body for mutating virtual runtime variables
        required: true
        x-originalParamName: data
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VRVariables'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Deprecated - Mutate virtual runtime variables
      tags:
      - VirtualRuntime
      x-permission:
      - action: virtualRuntime.envVars.create
  /users/self:
    get:
      description: Get self user information
      operationId: GetSelfUser
      parameters:
      - description: create self user if it does not already exist
        in: query
        name: createIfNotExist
        schema:
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Self'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Get self user information
      tags:
      - User
  /users/self/invites/{inviteId}:
    post:
      description: Update user invitation
      operationId: UpdateSelfUserInvite
      parameters:
      - description: invite ID
        in: path
        name: inviteId
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateInviteRequest'
        description: request body for update user self invitation
        required: true
        x-originalParamName: body
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Invite'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - JWT: []
      summary: Update user invitation
      tags:
      - Invite
servers:
- url: https://api.astronomer-dev.io/v1alpha1